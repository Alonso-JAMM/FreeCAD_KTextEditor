
# The name of the generated bindings module (as imported in Python). You can change the name
# to something relevant for your project.
set(bindings_library "KEditor")

# The header file with all the types and functions for which bindings will be generated.
# Usually it simply includes other headers of the library you are creating bindings for.
set(wrapped_header ${CMAKE_CURRENT_SOURCE_DIR}/bindings.h)

# The typesystem xml file which defines the relationships between the C++ types / functions
# and the corresponding Python equivalents.
set(typesystem_file ${CMAKE_CURRENT_SOURCE_DIR}/bindings.xml)

#Specify which C++ files will be generated by shiboken. This includes the module wrapper
# and a '.cpp' file per C++ type. These are needed for generating the module shared
# library.
set(generated_sources
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/keditor_module_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/keditorexample_keditorview_wrapper.cpp
)

get_target_property(shiboken2_generator Shiboken2::shiboken2 LOCATION)

# set the paths in a way that shiboken2 can use
function(JOIN VALUES GLUE OUTPUT)
    string (REPLACE ";" "${GLUE}" _TMP_STR "${VALUES}")
    set(${OUTPUT} "${_TMP_STR}" PARENT_SCOPE)
endfunction()

JOIN("${Qt5Widgets_INCLUDE_DIRS}" ":" qt5widgets_dirs)


# FIX THIS
set(PYSIDE_INCLUDE_DIR "/usr/include/PySide2")
# https://github.com/KDAB/KDDockWidgets/blob/master/cmake/Python/FindPySide2.cmake
set_property(TARGET PySide2::pyside2 APPEND PROPERTY
    INTERFACE_INCLUDE_DIRECTORIES
    ${PYSIDE_INCLUDE_DIR}
    ${PYSIDE_INCLUDE_DIR}/QtCore/
    ${PYSIDE_INCLUDE_DIR}/QtGui/
    ${PYSIDE_INCLUDE_DIR}/QtWidgets/
)


set(include_paths "${CMAKE_SOURCE_DIR}:${qt5widgets_dirs}")


# The header file with all the types and functions for which bindings will be generated.
# Usually it simply includes other headers of the library you are creating bindings for.
set(typesystem_paths "${CMAKE_SOURCE_DIR}:${PYSIDE_TYPESYSTEMS}")

# Set up the options to pass to shiboken.
set(shiboken_options
        --generator-set=shiboken
        --enable-parent-ctor-heuristic
        --enable-return-value-heuristic
        --use-isnull-as-nb_nonzero
        --avoid-protected-hack
        --enable-pyside-extensions
        --include-paths=${include_paths}
        --typesystem-paths=${typesystem_paths}
        --output-directory=${CMAKE_CURRENT_BINARY_DIR}
)

set(generated_sources_dependencies ${wrapped_header} ${typesystem_file})

# Add custom target to run shiboken to generate the binding cpp files.
add_custom_command(
    OUTPUT ${generated_sources}
    COMMAND ${shiboken2_generator}
    ${shiboken_options}
    ${wrapped_header}
    ${typesystem_file}
    DEPENDS ${generated_sources_dependencies}
    #IMPLICIT_DEPENDS CXX ${wrapped_header}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Running generator for ${typesystem_file}."
)


# Set the cpp files which will be used for the bindings library.
set(${bindings_library}_sources ${generated_sources})

# Define and build the bindings library.
add_library(${bindings_library} MODULE ${${bindings_library}_sources})

# Apply relevant include and link flags.
target_include_directories(${bindings_library} PRIVATE ${SHIBOKEN_PYTHON_INCLUDE_DIRS})
target_include_directories(${bindings_library} PUBLIC "${CMAKE_SOURCE_DIR}")


#target_link_libraries(${bindings_library} PRIVATE KEDITORLIB)
target_link_libraries(${bindings_library} PRIVATE Shiboken2::libshiboken)
target_link_libraries(${bindings_library} PUBLIC keditor)
target_link_libraries(${bindings_library} PRIVATE PySide2::pyside2)
target_link_libraries(${bindings_library} PRIVATE Qt5::Core)
target_link_libraries(${bindings_library} PRIVATE Qt5::Widgets)
target_link_libraries(${bindings_library} PRIVATE Qt5::Gui)
#target_link_libraries(${bindings_library} PRIVATE KF5::TextEditor)

# Adjust the name of generated module.
set_property(TARGET ${bindings_library} PROPERTY PREFIX "")
set_property(TARGET ${bindings_library} PROPERTY OUTPUT_NAME
             "${bindings_library}")
